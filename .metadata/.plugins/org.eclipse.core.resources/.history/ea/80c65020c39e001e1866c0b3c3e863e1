package com.polaris.main;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.util.ArrayList;
import java.util.List;

import javax.imageio.ImageIO;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector3i;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL12;
import org.lwjgl.opengl.GL13;
import org.lwjgl.opengl.GL14;
import org.lwjgl.opengl.GL15;
import org.lwjgl.opengl.GL20;
import org.lwjgl.opengl.GL30;
import org.lwjgl.stb.STBImage;
import org.lwjgl.system.MemoryStack;

import com.polaris.main.components.Mesh;
import com.polaris.main.components.Model;
import com.polaris.main.rendering.TextureData;
import com.polaris.main.utils.Utils;

import de.matthiasmann.twl.utils.PNGDecoder;
import de.matthiasmann.twl.utils.PNGDecoder.Format;

/*
 * VAO = Vertex Array Object
 * An object in which you can store data about a 3D model, a VAO has
 * 16 attribute lists. Typically, different data is stored in each list.
 * For example, in list 0 you might store all the vertex positions, in
 * list 1 you might store all the vertex colors, in list 2 you might store
 * all the normal vectors, list 3 texture coordinates, and so on. This data
 * is stored as VBOs.
 * 
 * Each VAO has a unique ID which is stored in memory to be accessed at any 
 * time
 * 
 * VBO = Vertex Buffer Object
 * A VBO is just data as mentioned above, stored in a VAO list. The VBO can
 * be positions, colors, normals, anything... Which then is stored in a 
 * separate attribute list. 
 * 
 * EXAMPLE:
 * -------------------------------
 * VAO - unique id
 * -------------------------------
 * 0 | VBO for vertices
 * 1 | VBO for normals
 * 2 | VBO for texture coordinates
 * 
 */

public class ObjectLoader {
	
	private List<Integer> vaos = new ArrayList<>();
	private List<Integer> vbos = new ArrayList<>();
	private List<Integer> textures = new ArrayList<>();
	
	// load mesh from positions and dimensions
	public Mesh loadMesh(float[] positions, int dimensions) {
		int id = createVAO();
		this.storeDataInAttribList(0, dimensions, positions);
		unbind();
		return new Mesh(id, positions.length / dimensions);
	}
	
	// load model from positions and dimensions
	public Model loadModel(float[] positions, int dimensions) {
		int id = createVAO();
		this.storeDataInAttribList(0, dimensions, positions);
		unbind();
		return new Model(id, positions.length / dimensions);
	}
	
	// load model from vertices, texture coordinates, normals, and indices data
	public Model loadModel(float[] vertices, float[] textureCoords,
						   float[] normals, int[] indices) {
		
		int id = createVAO();
		storeIndicesBuffer(indices);
		storeDataInAttribList(0, 3, vertices);
		storeDataInAttribList(1, 2, textureCoords);
		storeDataInAttribList(2, 3, normals);
		unbind();
		return new Model(id, indices.length);
	}
	
	// Load OBJ Model from a file
	/*
	 * This method parses a file and stores the vertices, normals, textures, and faces in 
	 * separate array lists. Then loadModel(verticesArr, texCoordArr, normalArr, indicesArr);
	 * is called, creating a VAO and storing the data in the VBOs. 
	 */
	public Model loadOBJModel(String filename) {
		List<String> lines = Utils.readAllLines(filename);
		
		List<Vector3f> vertices = new ArrayList<>();
		List<Vector3f> normals = new ArrayList<>();
		List<Vector2f> textures = new ArrayList<>();
		List<Vector3i> faces = new ArrayList<>();
		
		for(String line : lines) {
			String[] tokens = line.split("\\s+");
			switch (tokens[0]) {
				case "v":
					Vector3f verticesVec = new Vector3f(
							Float.parseFloat(tokens[1]),
							Float.parseFloat(tokens[2]),
							Float.parseFloat(tokens[3])
					);
					vertices.add(verticesVec);
					break;
					
				case "vt":
					Vector2f texturesVec = new Vector2f (
							Float.parseFloat(tokens[1]),
							Float.parseFloat(tokens[2])
					);
					textures.add(texturesVec);
					break;
					
				case "vn":
					Vector3f normalsVec = new Vector3f(
							Float.parseFloat(tokens[1]),
							Float.parseFloat(tokens[2]),
							Float.parseFloat(tokens[3])
					);
					normals.add(normalsVec);
					break;
					
				case "f":
					processFace(tokens[1], faces);
					processFace(tokens[2], faces);
					processFace(tokens[3], faces);
					break;
					
				default:
					break;
					
			}
		}
		
		List<Integer> indices = new ArrayList<>();
		float[] verticesArr = new float[vertices.size() * 3];
		int i = 0;
		
		for(Vector3f pos : vertices) {
			verticesArr[i * 3] = pos.x;
			verticesArr[i * 3 + 1] = pos.y;
			verticesArr[i * 3 + 2] = pos.z;
			i++;
		}
		
		float[] texCoordArr = new float[vertices.size() * 2];
		float[] normalArr = new float[vertices.size() * 3];
		
		for (Vector3i face : faces) {
			processVertex(face.x, face.y, face.z, textures, normals, indices, texCoordArr, normalArr);
		}
		
		int[] indicesArr = indices.stream().mapToInt((Integer v) -> v).toArray();
		
		return loadModel(verticesArr, texCoordArr, normalArr, indicesArr);
	}
	
	private static void processVertex(int pos, int texCoord, int normal, List<Vector2f> texCoordList,
									List<Vector3f> normalList, List<Integer> indicesList,
									float[] texCoordArr, float[] normalArr) {
		
		indicesList.add(pos);
		
		if (texCoord >= 0) {
			Vector2f texCoordVec = texCoordList.get(texCoord);
			texCoordArr[pos * 2] = texCoordVec.x;
			texCoordArr[pos * 2 + 1] = 1 - texCoordVec.y;
		}
		
		if (normal >= 0) {
			Vector3f normalVec = normalList.get(normal);
			normalArr[pos * 3] = normalVec.x;
			normalArr[pos * 3 + 1] = normalVec.y;
			normalArr[pos * 3 + 2] = normalVec.z;
		}
	}
	
	// calculates face information from a parsed line in an OBJ file
	private static void processFace(String token, List<Vector3i> faces) {
		String[] lineToken = token.split("/");
		int length = lineToken.length;
		int pos = -1, coords = -1, normal = -1;
		pos = Integer.parseInt(lineToken[0]) - 1;

		if (length > 1) {
			String textCoord = lineToken[1];
			coords = textCoord.length() > 0 ? Integer.parseInt(textCoord) - 1 : -1;
			if (length > 2) {
				normal = Integer.parseInt(lineToken[2]) - 1;
			}
		}
		
		Vector3i facesVec = new Vector3i(pos, coords, normal);
		faces.add(facesVec);
	}
	
	//==================================================================================================================
	// Texture Loading And Processing Methods
	//==================================================================================================================
	public int loadTexture(String filename) throws Exception {
		int width;
		int height;
		ByteBuffer buffer;
		
		try(MemoryStack stack = MemoryStack.stackPush()) {
			IntBuffer w = stack.mallocInt(1);
			IntBuffer h = stack.mallocInt(1);
			IntBuffer c = stack.mallocInt(1);
			
			buffer = STBImage.stbi_load(filename, w, h, c, 4);
			if (null == buffer) {
				throw new Exception("Image File " + filename + " not loaded " +
									STBImage.stbi_failure_reason());
			}
			
			width = w.get();
			height = h.get();
		}
		
		int id = GL11.glGenTextures();
		textures.add(id);
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, id);
		GL11.glPixelStorei(GL11.GL_UNPACK_ALIGNMENT, 1);
		GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, width, height, 0,
					GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, buffer);
		GL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);
		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);
		GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, -0.5f);
		STBImage.stbi_image_free(buffer);
		return id;
	}
	
	public BufferedImage loadHeightMap(String filename) {
		try {
			return ImageIO.read(new File("heightmaps/TerrainHeightMap.png"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	// Load Cube Map from texture files array stored in the specified path
	public int loadCubeMap(String[] textureFiles, String path) {
		
		// Cube maps have 6 faces, openGL stores these as integer constants listed below
		// The loop starts with the first face and adds the index i in each iteration 
		/*	GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069		Right  Face
		 * 	GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070		Left   Face
		 * 	GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071		Top	   Face
		 * 	GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072		Bottom Face
		 * 	GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073		Back   Face
		 * 	GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074		Front  Face
		 */
		
		// In order for your cube map to load correctly be sure the textures are in the
		// the folder in this order listed above
		
		int texID = GL11.glGenTextures();
		GL13.glActiveTexture(GL13.GL_TEXTURE0);
		GL11.glBindTexture(GL13.GL_TEXTURE_CUBE_MAP, texID);
		
		for (int i = 0; i < textureFiles.length; i++) {
			TextureData data = decodeTextureFile(path + "/" + textureFiles[i] 
												 + ".png");
			GL11.glTexImage2D(GL13.GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, GL11.GL_RGBA, data.getWidth(), 
							  data.getHeight(), 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE,
							  data.getBuffer());
		}
		
		GL11.glTexParameteri(GL13.GL_TEXTURE_CUBE_MAP, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
		GL11.glTexParameteri(GL13.GL_TEXTURE_CUBE_MAP, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
		GL11.glTexParameteri(GL13.GL_TEXTURE_CUBE_MAP, GL11.GL_TEXTURE_WRAP_S, GL12.GL_CLAMP_TO_EDGE);
		GL11.glTexParameteri(GL13.GL_TEXTURE_CUBE_MAP, GL11.GL_TEXTURE_WRAP_T, GL12.GL_CLAMP_TO_EDGE);
		textures.add(texID);
		return texID;
	}
	
	// Store texture data in TextureData object
	/*
	 * This method is used to decode a PNG file and store the data as a byte buffer
	 * Currently I'm still unfamiliar with how this actually works. But right now
	 * this method is used along side, and called, from the loadCubeMap method.
	 */
	private TextureData decodeTextureFile(String filename) {
		int width = 0;
		int height = 0;
		ByteBuffer buffer = null;
		try {
			FileInputStream in = new FileInputStream(filename);
			PNGDecoder decoder = new PNGDecoder(in);
			width = decoder.getWidth();
			height = decoder.getHeight();
			buffer = ByteBuffer.allocateDirect(4 * width * height);
			decoder.decode(buffer, width * 4, Format.RGBA);
			buffer.flip();
			in.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.err.println("Tried to load texture " + filename + ", didn't work");
			System.exit(-1);
		}
		return new TextureData(buffer, width, height);
	}
	
	//==================================================================================================================
	// VAO and VBO methods 
	//==================================================================================================================
	/*
	 * Used for the creation and storage of data
	 * VAOs are Vertex Array Objects, these objects store arrays of data called VBOs
	 * Each VBO stores a different type of data defined by the user. They are indexed 0 - 15.
	 * 
	 */
	

	/* Create VAO
	 * 
	 * Generates an id using GL30.glGenVertexArrays();
	 * adds the generated id to the vao list defined at the top of this class
	 * binds the id using GL30.glBindVertedArray(id);
	 * returns the id.
	 * 
	 */
	private int createVAO() {
		int id = GL30.glGenVertexArrays();
		vaos.add(id);
		GL30.glBindVertexArray(id);
		return id;
	}
	
	// Store Data In Attribute List: VBO
	private void storeDataInAttribList(int attribNo, int vertexCount, float[] data) {
		int vbo = GL15.glGenBuffers();
		vbos.add(vbo);
		GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, vbo);
		FloatBuffer buffer = Utils.storeDataInFloatBuffer(data);
		GL15.glBufferData(GL15.GL_ARRAY_BUFFER, buffer, GL15.GL_STATIC_DRAW);
		GL20.glVertexAttribPointer(attribNo, vertexCount, GL11.GL_FLOAT, false, 0, 0);
		GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);
	}
	
	// Store Indices Buffer: VBO
	private void storeIndicesBuffer(int[] indices) {
		int vbo = GL15.glGenBuffers();
		vbos.add(vbo);
		GL15.glBindBuffer(GL15.GL_ELEMENT_ARRAY_BUFFER, vbo);
		IntBuffer buffer = Utils.storeDataInIntBuffer(indices);
		GL15.glBufferData(GL15.GL_ELEMENT_ARRAY_BUFFER, buffer, GL15.GL_STATIC_DRAW);
	}
	
	// Unbind vertex arrays
	private void unbind() {
		GL30.glBindVertexArray(0);
	}
	
	// Delete the vaos and vbos
	public void cleanup() {
		vaos.forEach(vaos -> GL30.glDeleteVertexArrays(vaos));
		vbos.forEach(vbos -> GL30.glDeleteBuffers(vbos));
		textures.forEach(textures -> GL30.glDeleteTextures(textures));
	}

}
