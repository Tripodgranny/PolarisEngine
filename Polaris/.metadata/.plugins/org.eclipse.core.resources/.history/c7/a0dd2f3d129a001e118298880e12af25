package com.polaris.main.rendering;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.joml.Vector3f;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL13;
import org.lwjgl.opengl.GL20;
import org.lwjgl.opengl.GL30;

import com.polaris.main.Camera;
import com.polaris.main.Launcher;
import com.polaris.main.entity.Model;
import com.polaris.main.entity.Texture;
import com.polaris.main.lighting.DirectionalLight;
import com.polaris.main.lighting.PointLight;
import com.polaris.main.lighting.SpotLight;
import com.polaris.main.rendering.shaders.ShaderManager;
import com.polaris.main.terrain.Terrain;
import com.polaris.main.utils.Constants;
import com.polaris.main.utils.Transformation;
import com.polaris.main.utils.Utils;

public class TerrainRenderer implements IRenderer<Object> {
	
	ShaderManager shader;
	private Map<Model, List<Terrain>> terrains;
	
	Texture background;
	Texture rTexture;
	Texture gTexture;
	Texture bTexture;
	Texture blendMap;
	
	public TerrainRenderer() throws Exception {
		terrains = new HashMap<>();
		shader = new ShaderManager();
	}

	@Override
	public void initialize() throws Exception {
		shader.createVertexShader(Utils.loadResource("/shaders/terrain_vertex_blended_shader.vs"));
		shader.createFragmentShader(Utils.loadResource("/shaders/terrain_fragment_blended_shader.fs"));
		shader.link();
		
		shader.createUniform("skyColour");
		shader.createUniform("transformationMatrix");
		shader.createUniform("projectionMatrix");
		shader.createUniform("viewMatrix");
		
		shader.createUniform("ambientLight");
		shader.createMaterialUniform("material");
		shader.createUniform("specularPower");
		
		shader.createUniform("hasTextures");
		shader.createUniform("backgroundTexture");
		shader.createUniform("rTexture");
		shader.createUniform("gTexture");
		shader.createUniform("bTexture");
		shader.createUniform("blendMap");

		shader.createDirectionalLightUniform("directionalLight");
		shader.createPointLightListUniform("pointLights", Constants.MAX_POINT_LIGHTS);
		shader.createSpotLightListUniform("spotLights", Constants.MAX_SPOT_LIGHTS);
		
	}
	
	public void loadSkyColour(float r, float g, float b) {
		shader.setUniform("skyColour", new Vector3f(r,g,b));
	}

	@Override
	public void render(Camera camera, PointLight[] pointLights, SpotLight[] spotLights,
			DirectionalLight directionalLight) {
		shader.bind();
		shader.setUniform("projectionMatrix", Launcher.getWindow().updateProjectionMatrix());
		RenderManager.renderLights(pointLights, spotLights, directionalLight, shader);
		
		for (Model model : terrains.keySet()) {
			bind(model);
			List<Terrain> terrainList = terrains.get(model);
			for (Terrain terrain : terrainList) {
				bindTextures(terrain);
				prepare(terrain, camera);
				GL11.glDrawElements(GL11.GL_TRIANGLES, terrain.getModel().getVertexCount()
						,GL11.GL_UNSIGNED_INT, 0);
			}
			unbind();
		}
		terrains.clear();
		shader.unbind();
		
	}

	@Override
	public void bind(Model model) {
		GL30.glBindVertexArray(model.getId());
		GL20.glEnableVertexAttribArray(0);
		GL20.glEnableVertexAttribArray(1);
		GL20.glEnableVertexAttribArray(2);

		shader.setUniform("material", model.getMaterial());
		
	}
	
	private void bindTextures(Terrain terrain) {
		Texture background = terrain.getTextures().get(0);
		Texture rTexture   = terrain.getTextures().get(1);
		Texture gTexture   = terrain.getTextures().get(2);
		Texture bTexture   = terrain.getTextures().get(3);
		Texture blendMap   = terrain.getBlendMap();
		shader.setUniform("material", terrain.getMaterial());
		GL13.glActiveTexture(GL13.GL_TEXTURE0);
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, background.getId());
		GL13.glActiveTexture(GL13.GL_TEXTURE1);
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, rTexture.getId());
		GL13.glActiveTexture(GL13.GL_TEXTURE2);
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, gTexture.getId());
		GL13.glActiveTexture(GL13.GL_TEXTURE3);
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, bTexture.getId());
		GL13.glActiveTexture(GL13.GL_TEXTURE4);
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, blendMap.getId());
		shader.setUniform("backgroundTexture", 0);
		shader.setUniform("rTexture", 1);
		shader.setUniform("gTexture", 2);
		shader.setUniform("bTexture", 3);
		shader.setUniform("blendMap", 4);
		

	}

	@Override
	public void unbind() {
		GL20.glDisableVertexAttribArray(0);
		GL20.glDisableVertexAttribArray(1);
		GL20.glDisableVertexAttribArray(2);
		GL30.glBindVertexArray(0);
		
	}

	@Override
	public void prepare(Object terrain, Camera camera) {
		bindTextures((Terrain) terrain);

		shader.setUniform("transformationMatrix",
						  Transformation.createTransformationMatrix((Terrain) terrain));
		
		shader.setUniform("viewMatrix", Transformation.getViewMatrix(camera));
		
	}

	@Override
	public void cleanup() {
		shader.cleanup();
		
	}
	
	public Map<Model, List<Terrain>> getTerrains() {
		return terrains;
	}

}
