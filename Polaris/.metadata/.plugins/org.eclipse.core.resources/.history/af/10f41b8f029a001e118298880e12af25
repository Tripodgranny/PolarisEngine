package com.polaris.main;

import org.joml.Matrix4f;
import org.lwjgl.glfw.GLFW;
import org.lwjgl.glfw.GLFWErrorCallback;
import org.lwjgl.glfw.GLFWVidMode;
import org.lwjgl.opengl.GL;
import org.lwjgl.opengl.GL11;
import org.lwjgl.system.MemoryUtil;

import com.polaris.main.utils.Constants;

public class WindowManager {
	
	// handle to window object in memory for openGL methods
	public long window;

	// main window attributes
	private String title = "PolarisEngine";
	private int width = 800;
	private int height = 600;
	private boolean fullscreen = true;
	private boolean resizable = true;
	private boolean vSync = true;
	
	// matrix attributes
	private final Matrix4f projectionMatrix;

	public WindowManager(String title, int width, int height, boolean vSync) {
		this.title = title;
		this.width = width;
		this.height = height;
		this.vSync = vSync;
		projectionMatrix = new Matrix4f();
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////
	//	Setters   								                                             //
	///////////////////////////////////////////////////////////////////////////////////////////
	
	// TITLE
	public void setTitle(final String title) {
		GLFW.glfwSetWindowTitle(window, title);
	}
	// WIDTH
	public void setWidth(final int width) {
		this.width = width;
	}
	// HEIGHT
	public void setHeight(final int height) {
		this.height = height;
	}
	// FULLSCREEN
	public void setFullScreen(final boolean fullscreen) {
		this.fullscreen = fullscreen;
		if (fullscreen)
		GLFW.glfwWindowHint(GLFW.GLFW_MAXIMIZED, GLFW.GLFW_TRUE);
	}
	// RESIZABLE
	public void setResizable(final boolean resizable) {
		this.resizable = resizable;
	}
	// VSYNC
	public void setvSync(final boolean vSync) {
		this.vSync = vSync;
	}
	// CLEAR WINDOW COLOR
	public void setClearColour(float r, float g, float b, float a) {
		GL11.glClearColor(r, g, b, a);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////
	//	Getters   								                                             //
	///////////////////////////////////////////////////////////////////////////////////////////
	
	// TITLE
	public String getTitle() {
		return title;
	}
	
	// WIDTH
	public int getWidth() {
		return width;
	}
	
	// HEIGHT
	public int getHeight() {
		return height;
	}
	
	// RESIZABLE
	public boolean isResizable() {
		return resizable;
	}
	
	// FULLSCREEN
	public boolean isFullScreen() {
		return fullscreen;
	}
	
	// VSYNC
	public boolean getvSync() {
		return vSync;
	}
	
	// WINDOW
	public long getWindow() {
		return window;
	}
	
	// PROJECTION MATRIX
	public Matrix4f getProjectionMatrix() {
		return projectionMatrix;
	}
	
	// WINDOW PROJECTION MATRIX UPDATE
	public Matrix4f updateProjectionMatrix() {
		float aspectRatio = width / height;
		return projectionMatrix.setPerspective(Constants.FOV, aspectRatio, Constants.Z_NEAR, Constants.Z_FAR);
	}
	
	// SKYBOX MATRIX
	public Matrix4f updateSkyboxMatrix() {
		float aspectRatio = width / height;
		Matrix4f matrix = projectionMatrix.setPerspective(Constants.FOV, aspectRatio, Constants.Z_NEAR, Constants.Z_FAR).m30(0).m31(0).m32(0);
		return matrix;
	}
	
	// UPDATE A PROJECTION MATRIX
	public Matrix4f updateProjectionMatrix(Matrix4f matrix, int width, int height) {
		float aspectRatio = (float) width / height;
		return matrix.setPerspective(Constants.FOV, aspectRatio, Constants.Z_NEAR, Constants.Z_FAR);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////
	//	Public Methods																		 //
	///////////////////////////////////////////////////////////////////////////////////////////
	
	// INITIALIZE WINDOW
	public void initialize() {
		
		setWindowHints();
		setFullScreen(isFullScreen());
		createWindow();
		createCallbacks();
		
		// window positioning
		if (isFullScreen()) 
			GLFW.glfwMaximizeWindow(window);
		else {
			GLFWVidMode vidMode = GLFW.glfwGetVideoMode(GLFW.glfwGetPrimaryMonitor());
			GLFW.glfwSetWindowPos(window, (vidMode.width() - getWidth()) / 2,
										   (vidMode.height() - getHeight()) / 2);
		}
		
		// set context and display window
		GLFW.glfwMakeContextCurrent(window);
		
		if (getvSync())
			GLFW.glfwSwapInterval(1);
		
		GLFW.glfwShowWindow(window);
	
		GL.createCapabilities();
		
		// OpenGL Test Enabling
		GL11.glEnable(GL11.GL_DEPTH_TEST);
		GL11.glEnable(GL11.GL_STENCIL_TEST);
		GL11.glEnable(GL11.GL_CULL_FACE);
		GL11.glEnable(GL11.GL_BACK);
	}
	
	// UPDATE WINDOW
	public void update() {
		GLFW.glfwSwapBuffers(window);
		GLFW.glfwPollEvents();
	}
	
	// CLEAN UP
	public void cleanup() {
		GLFW.glfwDestroyWindow(window);
	}
	
	// KEYPRESS CHECKING
	public boolean isKeyPressed(int keyCode) {
		return GLFW.glfwGetKey(window, keyCode) == GLFW.GLFW_PRESS;
	}
	
	// CLOSE WINDOW
	public boolean windowShouldClose() {
		return GLFW.glfwWindowShouldClose(window);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////
	//	Private Methods																		 //
	///////////////////////////////////////////////////////////////////////////////////////////
	
	// WINDOW CALLBACKS
	private void createCallbacks() {
		// window resized callback
		GLFW.glfwSetFramebufferSizeCallback(window, (window, width, height) -> {
			setWidth(width); setHeight(height);
		});
		
		// window escape key close operation callback
		GLFW.glfwSetKeyCallback(window, (window, key, scancode, action, mods) -> {
			if (key == GLFW.GLFW_KEY_ESCAPE && action == GLFW.GLFW_RELEASE)
				GLFW.glfwSetWindowShouldClose(window, true);
		});
	}
	
	// WINDOW HINTS
	private void setWindowHints() {
		GLFWErrorCallback.createPrint(System.err).set();
		
		if (!GLFW.glfwInit()) {
			throw new IllegalStateException("Unable to initialize GLFW");
		}
		
		GLFW.glfwDefaultWindowHints();
		GLFW.glfwWindowHint(GLFW.GLFW_VISIBLE, GL11.GL_FALSE);
		GLFW.glfwWindowHint(GLFW.GLFW_RESIZABLE, GL11.GL_TRUE);
		GLFW.glfwWindowHint(GLFW.GLFW_CONTEXT_VERSION_MAJOR, 3);
		GLFW.glfwWindowHint(GLFW.GLFW_CONTEXT_VERSION_MINOR, 2);
		GLFW.glfwWindowHint(GLFW.GLFW_OPENGL_PROFILE,GLFW.GLFW_OPENGL_CORE_PROFILE);
		GLFW.glfwWindowHint(GLFW.GLFW_OPENGL_FORWARD_COMPAT, GL11.GL_TRUE);
		
		if (width == 0 || height == 0) {
			width = 100;
			height = 100;
			setFullScreen(true);
		}
	}
	
	// CREATE WINDOW
	private void createWindow() {
		window = GLFW.glfwCreateWindow
				  (getWidth(), getHeight(), getTitle(), MemoryUtil.NULL, MemoryUtil.NULL);

		if (MemoryUtil.NULL == window)
			throw new RuntimeException("Failed to create GLFW window");

	}
	
}
