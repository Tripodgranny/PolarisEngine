package com.polaris.main;

import org.lwjgl.glfw.GLFW;
import org.lwjgl.glfw.GLFWErrorCallback;

import com.polaris.main.game.ILogic;
import com.polaris.main.input.InputManager;

/*
 * Sets up the main game loop and updates the game logic and window.
 */
public class EngineManager {
	
	public static final long NANOSECOND = 1000000000;
	public static final float FRAMERATE = 1000f;
	
	private static int fps;
	private static float frametime = 1.0f / FRAMERATE;
	
	private boolean isRunning;
	
	private WindowManager window;
	private static InputManager inputManager;
	private GLFWErrorCallback errorCallback;
	private ILogic gameLogic;
	
	public static InputManager getInput() {
		if (inputManager == null) {
			inputManager = new InputManager();
		}
		return inputManager;
	}
	
	public static int getFps() {
		return fps;
	}

	public void start() throws Exception {
		initialize();
		if (isRunning)
			return;
		
		run();
	}
	
	private void initialize() throws Exception {
		GLFW.glfwSetErrorCallback(errorCallback = GLFWErrorCallback.createPrint(System.err));
		window = Launcher.getWindow();
		gameLogic = Launcher.getGame();
		
		window.initialize();
		
		inputManager = getInput();
		inputManager.initialize();
		
		gameLogic.initialize();
	}
	
	private void run() {
		this.isRunning = true;
		int frames = 0;
		long frameCounter = 0;
		long lastTime = System.nanoTime();
		double unprocessedTime = 0;
		
		while (isRunning) {
			boolean render = false;
			long startTime = System.nanoTime();
			long passedTime = startTime - lastTime;
			lastTime = startTime;
			
			unprocessedTime += passedTime / (double) NANOSECOND;
			frameCounter += passedTime;
			
			input();
			
			while(unprocessedTime > frametime) {
				render = true;
				unprocessedTime -= frametime;
				
				
				if (window.windowShouldClose()) 
					stop();
				
				if (frameCounter >= NANOSECOND) {
					setFps(frames);
					window.setTitle(window.getTitle() + " | FPS: " + getFps());
					frames = 0;
					frameCounter = 0;
				}
			}
			
			if (render) {
				update((float)(passedTime / (double) NANOSECOND)*10f);
				render();
				frames++;
			}
		}
		
		cleanup();
	}
	
	private void stop() {
		if (!isRunning) 
			return;
		isRunning = false;
	}
	
	private void input() {
		inputManager.update();
		gameLogic.input();
	}
	
	private void render() {
		gameLogic.render();
		window.update();
	}
	
	private void update(float interval) {
		gameLogic.update(interval);
	}
	
	private void cleanup() {
		window.cleanup();
		gameLogic.cleanUp();
		errorCallback.free();
		GLFW.glfwTerminate();
	}
	
	private static void setFps(int fps) {
		EngineManager.fps = fps;
	}

}
