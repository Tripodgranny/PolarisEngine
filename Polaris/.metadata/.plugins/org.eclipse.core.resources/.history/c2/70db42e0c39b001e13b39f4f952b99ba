package com.polaris.main.terrain;

import java.awt.image.BufferedImage;
import java.util.List;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4f;

import com.polaris.main.ObjectLoader;
import com.polaris.main.algorithms.noise.MathAlgorithms;
import com.polaris.main.algorithms.noise.Noise;
import com.polaris.main.entity.Material;
import com.polaris.main.entity.Model;
import com.polaris.main.entity.Texture;

public class Terrain {
	
	public static final int SIZE = 3000;
	private static final int VERTEX_COUNT = 512;
	private static final float MAX_HEIGHT = 140f;
	private static final float SMOOTHNESS = 12f;
	private static final float MAX_PIXEL_COLOUR = 16777216f;

	private Vector3f position;
	private Model model;
	private Texture blendMap;
	
	// Store Terrain Vertice Heights
	private float[][] verticeHeights;
	
	// TERRAIN BASED ON HEIGHTMAP
	public Terrain(Vector3f position, ObjectLoader loader, List<Texture> textures,
				   Texture blendMap, String heightMapFile) {
		this.position = position;
		this.model = generateTerrain(loader, heightMapFile);
		this.model.setTextures(textures);
		this.model.setMaterial(new Material());
		
		this.blendMap = blendMap;
	}
	
	// TERRAIN BASED ON HEIGHT GENERATOR
	public Terrain(Vector3f position, ObjectLoader loader, List<Texture> textures,
			   Texture blendMap, int seed) {
	this.position = position;
	this.model = generateTerrain(loader, seed);
	this.model.setTextures(textures);
	this.model.setMaterial(new Material());
	this.model.getMaterial().setReflectance(0);

	this.blendMap = blendMap;
}
	
	public static int getSize() {
		return SIZE;
	}
	
	public static int getVertexCount() {
		return VERTEX_COUNT;
	}
	
	//==================================================================================================================
	// getVertexHeightAtPosition - gets the height of a triangle on the terrain 
	//==================================================================================================================
	public float getVertexHeightAtPosition(final float worldPositionX, final float worldPositionZ) {
		float terrainX = worldPositionX - this.position.x;
		float terrainZ = worldPositionZ - this.position.z;
		float gridSquareSize = SIZE / (float)(verticeHeights.length - 1);
		int gridX = (int) Math.floor(terrainX / gridSquareSize);
		int gridZ = (int) Math.floor(terrainZ / gridSquareSize);
		
		// Test if this terrains grid position is on the terrain
		if (gridX >= verticeHeights.length - 1 || gridZ >= verticeHeights.length - 1 || gridX < 0 || gridZ < 0) {
			return -1000000000;
		}
		
		// Find where the object is on the grid square
		float xCoord = (terrainX % gridSquareSize) / gridSquareSize;
		float zCoord = (terrainZ % gridSquareSize) / gridSquareSize;
		
		// The terrain is rendered in triangles, the below code determines which triangle the object is in
		float heightOfTriangle;
		if (xCoord <= (1-zCoord)) {
			heightOfTriangle = 
					MathAlgorithms.barryCentric(new Vector3f(0, verticeHeights[gridX][gridZ], 0), new Vector3f(1,
								   verticeHeights[gridX + 1][gridZ], 0), new Vector3f(0,
								   verticeHeights[gridX][gridZ + 1], 1), new Vector2f(xCoord, zCoord));
		} else {
			heightOfTriangle = 
					MathAlgorithms.barryCentric(new Vector3f(1, verticeHeights[gridX + 1][gridZ], 0), new Vector3f(1,
								   verticeHeights[gridX + 1][gridZ + 1], 1), new Vector3f(0,
								   verticeHeights[gridX][gridZ + 1], 1), new Vector2f(xCoord, zCoord));
		}
		
		return heightOfTriangle;
	}
	
	public Vector3f getPosition() {
		return position;
	}

	public Model getModel() {
		return model;
	}
	
	public Material getMaterial() {
		return model.getMaterial();
	}
	
	public Texture getTexture() {
		return model.getTexture();
	}
	
	public List<Texture> getTextures() {
		return model.getTextures();
	}
	
	public Texture getBlendMap() {
		return blendMap;
	}
	
	// GENERATE TERRAIN BASED HEIGHT MAP
	private Model generateTerrain(ObjectLoader loader, String heightMapFile) {
		BufferedImage heightMap = loader.loadHeightMap(heightMapFile);
		final int VERTEX_COUNT = heightMap.getHeight();
		
		final int count = VERTEX_COUNT * VERTEX_COUNT;
		final float[] vertices = new float[count * 3];
		final float[] normals = new float[count * 3];
		final float[] textureCoords = new float[count*2];
		final int[] indices = new int[6*(VERTEX_COUNT-1)*(VERTEX_COUNT-1)];
		
		int vertexPointer = 0;
		for(int i=0;i<VERTEX_COUNT;i++){
			for(int j=0;j<VERTEX_COUNT;j++){
				vertices[vertexPointer*3] = (float)j/((float)VERTEX_COUNT - 1) * SIZE;
				vertices[vertexPointer*3+1] = getHeight(j, i, heightMap);
				vertices[vertexPointer*3+2] = (float)i/((float)VERTEX_COUNT - 1) * SIZE;
				normals[vertexPointer*3] = 0;
				normals[vertexPointer*3+1] = 1;
				normals[vertexPointer*3+2] = 0;
				textureCoords[vertexPointer*2] = (float)j/((float)VERTEX_COUNT - 1);
				textureCoords[vertexPointer*2+1] = (float)i/((float)VERTEX_COUNT - 1);
				vertexPointer++;
			}
		}
		int pointer = 0;
		for(int gz=0;gz<VERTEX_COUNT-1;gz++){
			for(int gx=0;gx<VERTEX_COUNT-1;gx++){
				int topLeft = (gz*VERTEX_COUNT)+gx;
				int topRight = topLeft + 1;
				int bottomLeft = ((gz+1)*VERTEX_COUNT)+gx;
				int bottomRight = bottomLeft + 1;
				indices[pointer++] = topLeft;
				indices[pointer++] = bottomLeft;
				indices[pointer++] = topRight;
				indices[pointer++] = topRight;
				indices[pointer++] = bottomLeft;
				indices[pointer++] = bottomRight;
			}
		}
		return loader.loadModel(vertices, textureCoords, normals, indices);
	}
	
	// GENERATE TERRAIN BASED ON HEIGHT GENERATOR
	private Model generateTerrain(ObjectLoader loader, int seed) {
		HeightGenerator generator = new HeightGenerator(MAX_HEIGHT, SMOOTHNESS);
		
		final int count = VERTEX_COUNT * VERTEX_COUNT;
		verticeHeights = new float[VERTEX_COUNT][VERTEX_COUNT];
		
		final float[] vertices = new float[count * 3];
		final float[] normals = new float[count * 3];
		final float[] textureCoords = new float[count*2];
		final int[] indices = new int[6 * (VERTEX_COUNT - 1) * (VERTEX_COUNT * 1)];
		
		int vertexPointer = 0;
		for(int i=0;i<VERTEX_COUNT;i++){
			for(int j=0;j<VERTEX_COUNT;j++){
				vertices[vertexPointer*3] = (float)j/((float)VERTEX_COUNT - 1) * SIZE;   //X
				float height = getHeight(j, i, generator);
				vertices[vertexPointer*3+1] = height;                                    //Y
				verticeHeights[j][i] = height;
				vertices[vertexPointer*3+2] = (float)i/((float)VERTEX_COUNT - 1) * SIZE; //Z
				Vector3f normal = calculateNormal(j, i, generator);
				normals[vertexPointer*3] = normal.x;
				normals[vertexPointer*3+1] = normal.y;
				normals[vertexPointer*3+2] = normal.z;
				textureCoords[vertexPointer*2] = (float)j/((float)VERTEX_COUNT - 1);
				textureCoords[vertexPointer*2+1] = (float)i/((float)VERTEX_COUNT - 1);
				vertexPointer++;
			}
		}
		
		int pointer = 0;
		for(int gz=0;gz<VERTEX_COUNT-1;gz++){
			for(int gx=0;gx<VERTEX_COUNT-1;gx++){
				int topLeft = (gz*VERTEX_COUNT)+gx;
				int topRight = topLeft + 1;
				int bottomLeft = ((gz+1)*VERTEX_COUNT)+gx;
				int bottomRight = bottomLeft + 1;
				indices[pointer++] = topLeft;
				indices[pointer++] = bottomLeft;
				indices[pointer++] = topRight;
				indices[pointer++] = topRight;
				indices[pointer++] = bottomLeft;
				indices[pointer++] = bottomRight;
			}
		}
		
		return loader.loadModel(vertices, textureCoords, normals, indices);
	}
	
	// GET HEIGHT FOR BUFFERED IMAGE TERRAIN
	private float getHeight(int x, int y, BufferedImage image) {
		if (x<0 || x>=image.getHeight() || y<0 || y>=image.getHeight()) {
			return 0;
		}
		float height = image.getRGB(x, y);
		height += MAX_PIXEL_COLOUR/2f;
		height /= MAX_PIXEL_COLOUR/2f;
		height *= MAX_HEIGHT;
		return height;
	}
	
	// GET HEIGHT FOR HEIGHT GENERATED HEIGHT TERRAIN
	private float getHeight(int x, int y, HeightGenerator generator) {
		return generator.generateHeight(x, y);
	}
	
	// CALCULATE NORMALS FROM HEIGHT GENERATOR
	private Vector3f calculateNormal(int x, int y, HeightGenerator generator) {
		float heightL = getHeight(x-1, y, generator);
		float heightR = getHeight(x+1, y, generator);
		float heightD = getHeight(x, y-1, generator);
		float heightU = getHeight(x, y+1, generator);
		Vector3f normal = new Vector3f(heightL-heightR, 2f, heightD - heightU);
		normal.normalize();
		return normal;
	}

}
