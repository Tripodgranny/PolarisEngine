package com.polaris.main.rendering;

import java.util.ArrayList;
import java.util.List;

import org.lwjgl.opengl.GL11;

import com.polaris.main.Launcher;
import com.polaris.main.ObjectLoader;
import com.polaris.main.WindowManager;
import com.polaris.main.camera.Camera;
import com.polaris.main.entity.Entity;
import com.polaris.main.lighting.DirectionalLight;
import com.polaris.main.lighting.PointLight;
import com.polaris.main.lighting.SpotLight;
import com.polaris.main.rendering.shaders.ShaderManager;
import com.polaris.main.terrain.Terrain;
import com.polaris.main.utils.Constants;

public class RenderManager {
	
	private final WindowManager window;
	private EntityRenderer entityRenderer;
	private TerrainRenderer terrainRenderer;
	private SkyboxRenderer skyboxRenderer;
	
	private static final float RED = 0.5f;
	private static final float GREEN = 0.5f;
	private static final float BLUE = 0.5f;
	
	public RenderManager() {
		window = Launcher.getWindow();
	}
	
	public void initialize() throws Exception {
		ObjectLoader loader = new ObjectLoader();
		entityRenderer = new EntityRenderer();
		terrainRenderer = new TerrainRenderer();
		// skyboxRenderer = new SkyboxRenderer(loader, "skyboxes\\bluesky");

		entityRenderer.initialize();
		terrainRenderer.initialize();
		// skyboxRenderer.initialize();
	}
	
	public static void renderLights(PointLight[] pointLights, SpotLight[] spotLights,
							 DirectionalLight directionalLight, ShaderManager shader) {
		shader.setUniform("ambientLight", Constants.AMBIENT_LIGHT);
		shader.setUniform("specularPower", Constants.SPECULAR_POWER);
		
		int numLights = spotLights != null ? spotLights.length : 0;
		for (int i = 0; i < numLights; i++) {
			shader.setUniform("spotLights", spotLights[i], i);
		}
		
		numLights = pointLights != null ? pointLights.length : 0;
		for (int i = 0; i < numLights; i++) {
			shader.setUniform("pointLights", pointLights[i], i);
		}
		
		shader.setUniform("directionalLight", directionalLight);
	}
	
	public void render(Camera camera, DirectionalLight directionalLight,
			PointLight[] pointLights, SpotLight[] spotLights) {
		clear();
		
		terrainRenderer.loadSkyColour(RED, GREEN, BLUE);
		
		if (window.isResizable()) {
			GL11.glViewport(0, 0, window.getWidth(), window.getHeight());
			window.setResizable(true);
		}
		
		entityRenderer.render(camera, pointLights, spotLights, directionalLight);
		terrainRenderer.render(camera, pointLights, spotLights, directionalLight);
		
		// skyboxRenderer.render(camera, pointLights, spotLights, directionalLight);

	}
	
	public void processEntity(Entity entity) {
		List<Entity> entityList = entityRenderer.getEntities().get(entity.getModel());
		if (entityList != null)
			entityList.add(entity);
		else {
			List<Entity> newEntityList = new ArrayList<>();
			newEntityList.add(entity);
			entityRenderer.getEntities().put(entity.getModel(), newEntityList);
		}
	}
	
	public void processTerrain(Terrain terrain) {
		List<Terrain> TerrainList = terrainRenderer.getTerrains().get(terrain.getModel());
		if (TerrainList != null)
			TerrainList.add(terrain);
		else {
			List<Terrain> newTerrainList = new ArrayList<>();
			newTerrainList.add(terrain);
			terrainRenderer.getTerrains().put(terrain.getModel(), newTerrainList);
		}
	}
	
	public void clear() {
		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
		GL11.glClearColor(RED, GREEN, BLUE, 1);
	}
	
	public void cleanup() {
		entityRenderer.cleanup();
		terrainRenderer.cleanup();
	}

}
